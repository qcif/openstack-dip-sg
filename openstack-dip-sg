#!/bin/bash
#
# OpenStack Dynamic IP security group updater.
#
# Manages ingress rules from dynamic IP addresses in OpenStack security groups.
#
# Requires unified OpenStack command line client, which can be installed using:
#
#     python3 -m venv venv
#     source venv/bin/activate
#     pip3 install --upgrade pip
#     pip3 install wheel
#     pip3 install python-openstackclient
#
# Copyright (C) 2021, QCIF Ltd.
#----------------------------------------------------------------

PROGRAM=openstack-dip-sg
VERSION=1.1.0

EXE=$(basename "$0" .sh)
EXE_EXT=$(basename "$0")
EXE_DIR=$(cd "$(dirname "$0")"; pwd)

#----------------
# Defaults

# Name of the security groups
DEFAULT_SECURITY_GROUP_NAME="User: $(id -u -n -r) Home"

# Description to use for the created rules
DESCRIPTION="Created by $PROGRAM $VERSION"

# Ports to use: port names can be used for some protocols (case insensitive)
# Find lowercase 'ssh' in this script, to see supported names.
DEFAULT_TCP_PORTS=SSH,HTTP,HTTPS

# Output from running `openstack security group rule create` are written here
DEFAULT_OUT_FILE=/dev/null

# The STUN server to use. Change to a more local STUN server, if you have one.
DEFAULT_STUN_SERVER=stun.stunprotocol.org

#----------------
# Log file.
#
# This is used to determine if the IP address has changed or not.  If
# the IP address has not changed, the rules do not need updating.
# Even if the IP address has not changed, updates can be forced to
# happen with the --force option.

# Location of the log file
#
# Empty string means no log file is kept, and updates will always
# happen (since there is no way to determine if the address has
# changed or not since the last update).

#LOG_FILE="$HOME/.dynamic-IP"
#LOG_FILE="$HOME/.$PROGRAM"
DEFAULT_LOG_FILE="$HOME/.cache/$PROGRAM/ip-address.log"

# Control how many entries to keep in the log file.
#
# Only keep the last entry, if value is empty. This may be useful so
# the file does not keep growing in size. Keeps appending entries to
# the file, if value is non-empty.

#FULL_LOG=
FULL_LOG=yes

#----------------------------------------------------------------
# Bash strict mode: http://redsymbol.net/articles/unofficial-bash-strict-mode/

# Exit immediately if a simple command exits with a non-zero status.
#   Trap ERR for better error messages than "set -e" gives (but ERR only
#   works for Bash and unlike "set -e" it doesn't propagate into functions.
#   Can't figure out which command failed? Run using "bash -x".
set -e
trap 'echo $EXE: aborted; exit $STATUS_UNEXPECTED_ERROR' ERR

set -u # fail on attempts to expand undefined environment variables
set -o pipefail # prevents errors in a pipeline from being masked

# IFS=$'\n\t'

#----------------------------------------------------------------
# Process command line arguments

SECURITY_GROUP_NAME="$DEFAULT_SECURITY_GROUP_NAME"
RC_FILE_SRC=
PASSWORD_FILE=
TCP_PORTS=
NO_ALL_ICMP=
OUT_FILE=/dev/null
FORCE=
STUN_SERVER="$DEFAULT_STUN_SERVER"
LOG_FILE="$DEFAULT_LOG_FILE"
IP_ADDRESS=

process_command_line() {
  local SHOW_VERSION
  local SHOW_HELP

  SHOW_VERSION=
  SHOW_HELP=

  while [ $# -gt 0 ]; do
    case "$1" in
      -s|--security-group)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        SECURITY_GROUP_NAME="$2"
        shift
        ;;

      -r|--rc)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        RC_FILE_SRC="$2"
        shift
        ;;

      -y|--password)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        PASSWORD_FILE="$2"
        shift
        ;;

      -o|--output)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        OUT_FILE="$2"
        shift
        ;;

      -p|--port|--ports)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        TCP_PORTS="$TCP_PORTS $2"
        shift
        ;;

      -f|--force)
        FORCE=yes
        ;;

      -S|--stun)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        STUN_SERVER="$2"
        shift
        ;;

      -l|--log)
        if [ $# -lt 2 ]; then
          echo "$EXE: usage error: missing argument for $1" >&2
          exit 2
        fi
        LOG_FILE="$2"
        shift
        ;;

      --no-all-icmp)
        NO_ALL_ICMP=yes
        ;;

      --version)
        SHOW_VERSION=yes
        ;;

      -h|--help)
        SHOW_HELP=yes
        ;;

      -*)
        echo "$EXE: usage error: unknown option: $1" >&2
        exit 2
        ;;
      *)
        if [ -n "$IP_ADDRESS" ]; then
          echo "$EXE:  usage error: too many arguments" >&2
          exit 2
        fi
        IP_ADDRESS="$1"
        ;;
    esac

    shift
  done

  #----------------
  # Help

  if [ -n "$SHOW_HELP" ]; then
    if [ -n "$FULL_LOG" ]; then
      LOG_HELP_TEXT='log file with only the most recent IP address'
    else
      LOG_HELP_TEXT='log file with all the IP addresses'
    fi

    cat <<EOF
Usage: $EXE_EXT [options] [IP_ADDRESS]
Options:
  -s|--security-group NAME  security group (default: "$DEFAULT_SECURITY_GROUP_NAME")
  -r|--rc PROJECT_SRC       projects with the security group to configure
  -y|--password FILE        read OpenStack password from a file
  -p|--port PORT_NUM        add rules for ingress to these TCP/IP port numbers
     --no-all-icmp          do not add rule for All ICMP (default: add rule)
  -o|--output FILE          openstack output (default: $DEFAULT_OUT_FILE)
  -f|--force                replace rules when detected IP address is unchanged
  -S|--stun SERVER          STUN server (default: $DEFAULT_STUN_SERVER)
  -l|--log FILE             $LOG_HELP_TEXT
                            (default: $DEFAULT_LOG_FILE)
     --version              display version information and exit
  -h|--help                 display this help and exit

IP_ADDRESS:
  IPv4 address for new ingress rules.
  Will try to automatically detect it, if it is not provided.
  Value of "none" will delete all rules without creating any new ones.

PROJECT_SRC:
  Either a single OpenStack RC file or a directory containing *-openrc.sh files
  if omitted, an OpenStack RC file must be sourced before running this script.

PORT_NUM:
  Integer or a name of common TCP/IP protocols.
  For multiple ports, repeat the option (e.g. -p 22 -p 80 -p 443)
  or comma separate the port numbers (e.g. -p 22,80,443).
  Default: $DEFAULT_TCP_PORTS
EOF
    exit 0
  fi

  #----------------
  # Version

  if [ -n "$SHOW_VERSION" ]; then
    echo "$PROGRAM $VERSION"
    exit 0
  fi

  #----------------
  # Password

  if [ -n "$PASSWORD_FILE" ]; then
    OS_PASSWORD="$(head -n 1 "$PASSWORD_FILE")"
  fi

  #----------------
  # TCP/IP ports

  if [ -n "$TCP_PORTS" ]; then
    _PORTS="$TCP_PORTS"
  else
    _PORTS="$DEFAULT_TCP_PORTS"
  fi

  # Check values and convert to a list of integer port numbers

  TCP_PORTS=
  for _P in $(echo $_PORTS | tr ',' ' '); do
    P=$(echo "$_P" | tr '[:upper:]' '[:lower:]') # make lowercase

    if echo "$P" | grep -qE '^[0-9]+$' ; then
      # Numeric port
      if [ "$P" -lt 1 ] || [ "$P" -gt 65535 ]; then
        echo "$EXE: usage error: port number out of range: $P" >&2
        exit 2
      fi
      NUM=$P
    elif [ "$P" = 'ssh' ]; then
      NUM=22
    elif [ "$P" = 'http' ]; then
      NUM=80
    elif [ "$P" = 'https' ]; then
      NUM=443
    elif [ "$P" = 'squid' ]; then
      NUM=3128
    elif [ "$P" = 'mysql' ]; then
      NUM=3306
    elif [ "$P" = 'postgresql' ]; then
      NUM=5432
    elif [ "$P" = 'rdp' ]; then
      NUM=3389
    else
      echo "$EXE: usage error: unrecognised port: $P" >&2
      exit 2
    fi

    TCP_PORTS="$TCP_PORTS $NUM"
  done

  #----------------
  # IP address

  FROM_STUN=

  if [ -z "$IP_ADDRESS" ] && [ -n "$STUN_SERVER" ]; then
    # No IP address provided

    if which stunclient >/dev/null; then
      # Stuntman available: try to automatically determine public IP address
      # http://www.stunprotocol.org
      # https://en.wikipedia.org/wiki/STUN

      IP_ADDRESS=$(stunclient "$STUN_SERVER" \
                     | awk -F': *' '/^Mapped address:/{print $2}')
      FROM_STUN=yes

    else
      # No IP address and cannot automatically determine it
      echo "$EXE: \"stunclient\" command not found <http://www.stunprotocol.org>" >&2
      echo "$EXE: so an IP address must be provided (-h for help)" >&2
      exit 2
    fi
  fi

  if [ "$IP_ADDRESS" != 'none' ]; then
    if ! echo "$IP_ADDRESS" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "$EXE: usage error: not an IPv4 address: $IP_ADDRESS" >&2
      exit 1
    fi

    if [ "$IP_ADDRESS" = '0.0.0.0/32' ]; then
      echo "$EXE: error: not using an untargeted IP address" >&2
      exit 1
    fi
  fi
}

#----------------------------------------------------------------

NUM_GROUPS_UPDATED=0

set_rules() {
  local _NEW_IP=$1

  # Debug: show the existing rules
  # openstack security group rule list "$SECURITY_GROUP_NAME"

  # Get list of current rules and check for unexpected rules
  #
  # Expecting all rules are for ingress from one IP address

  local _FOUND_SG=
  local _OLD_ADDR=
  local _IDS=

  local _ERRS="/tmp/$PROGRAM-$$.out"

  for ROW in $(openstack security group rule list "$SECURITY_GROUP_NAME" \
                         -f csv --quote minimal \
                         -c 'ID' -c 'IP Range' -c 'Direction' 2>>"$_ERRS"); do
    local _ID
    local _ADDR
    local _DIR

    _ID=$(echo "$ROW" | awk -F, '{print $1}')
    _ADDR=$(echo "$ROW" | awk -F, '{print $2}')
    _DIR=$(echo "$ROW" | awk -F, '{print $3}')

    if [ "$_ID" = 'ID' ]; then
      _FOUND_SG=yes
      continue; # skip the header row
    fi
    if [ "$_ID" = 'Range' ]; then
      # This should not happen, but it does
      continue; # skip the header row
    fi

    _IDS="$_IDS $_ID"

    if [ "$_DIR" != 'ingress' ]; then
      echo "$EXE: error: non-ingress rule found: $_DIR $_ADDR" >&2
      echo "$EXE: \"$SECURITY_GROUP_NAME\" in $OS_PROJECT_NAME: skipped" >&2
      return
    fi

    if [ -z "$_OLD_ADDR" ]; then
      _OLD_ADDR=$_ADDR
    else
      if [ "$_ADDR" != "$_OLD_ADDR" ]; then
        echo "$EXE: error: rules from multiple address found: $_ADDR != $_OLD_ADDR" >&2
        echo "$EXE: \"$SECURITY_GROUP_NAME\" in $OS_PROJECT_NAME: skipped" >&2
        return
      fi
    fi
  done

  # Detect authentication errors from stdout

  if grep -qE 'HTTP 401' "$_ERRS"; then
    rm "$_ERRS"
    echo "$EXE: error: $OS_PROJECT_NAME: $OS_USERNAME: invalid password" >&2
    exit 1
  fi
  rm "$_ERRS"

  # Detect other problems

  if [ -z "$_FOUND_SG" ]; then
    echo "$EXE: warning: $OS_PROJECT_NAME: security group not found: \"$SECURITY_GROUP_NAME\"" >&2
    echo "$EXE: warning: $OS_PROJECT_NAME: project skipped" >&2
    return
  fi

  if [ -z "$_IDS" ]; then
    echo "$EXE: warning: $OS_PROJECT_NAME: no existing rules were in the security group" >&2
  fi

  if [ -n "$_OLD_ADDR" ]; then
    if ! echo "$_OLD_ADDR" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/32$' ;
    then
      echo "$EXE: error: rules with IP range found: $_OLD_ADDR" >&2
      echo "$EXE: \"$SECURITY_GROUP_NAME\" in $OS_PROJECT_NAME: skipped" >&2
      return
    fi
  fi

  # Delete all current rules

  echo "$EXE: $OS_PROJECT_NAME: deleting rules from \"$SECURITY_GROUP_NAME\""

  for _ID in $_IDS; do
    openstack security group rule delete "$_ID"
  done

  if [ "$_NEW_IP" != 'none' ]; then
    # Create rules

    # Create new rule for All ICMP

    if [ -z "$NO_ALL_ICMP" ]; then
      echo "$EXE: $OS_PROJECT_NAME: creating ingress rule: all ICMP"

      openstack security group rule create \
                --ingress \
                --protocol ICMP \
                --remote-ip "$_NEW_IP" \
                --description "$DESCRIPTION" \
                "$SECURITY_GROUP_NAME" \
                >> "$OUT_FILE"
    fi

    # Create new rules for the TCP/IP ports

    local _TCP_PORT
    for _TCP_PORT in $TCP_PORTS; do
      echo "$EXE: $OS_PROJECT_NAME: creating ingress rule: TCP port $_TCP_PORT"

      openstack security group rule create \
                --ingress \
                --protocol TCP \
                --remote-ip "$_NEW_IP" --dst-port "$_TCP_PORT" \
                --description "$DESCRIPTION" \
                "$SECURITY_GROUP_NAME" \
                >> "$OUT_FILE"
    done
  fi

  NUM_GROUPS_UPDATED=$((NUM_GROUPS_UPDATED + 1))
}

#----------------------------------------------------------------

configure_project_sourced() {
  if [ -z "$OS_PROJECT_ID" ]; then
    echo "$EXE: internal error: no project to use" >&2
    exit 3
  fi

  if [ -n "$OS_PASSWORD_INPUT" ]; then
    set_rules "$IP_ADDRESS"
  else
    echo "$EXE: no password (\"$OS_PROJECT_NAME\" project skipped)" >&2
  fi
}

#----------------------------------------------------------------

configure_project_from_rc_file() {
  local _RC_FILE="$1"

  if [ ! -f "$_RC_FILE" ]; then
    echo "$EXE: error: not a file: $_RC_FILE" >&2
    exit 1
  fi

  # Create a copy of the RC file that does not prompt for the password

  TMP_RC="/tmp/$PROGRAM-rc-$$.tmp"
  touch $TMP_RC
  chmod 600 $TMP_RC

  grep -v 'read -sr OS_PASSWORD_INPUT' "$_RC_FILE" \
    | grep -v 'Please enter your OpenStack Password' \
           > $TMP_RC

  # Clear some of the expected environment variables

  unset OS_USERNAME
  unset OS_PROJECT_ID
  unset OS_PROJECT_NAME
  unset OS_AUTH_URL

  # Source the modified RC file

  source "$TMP_RC"

  # Clean up

  rm "$TMP_RC"

  # Check expected environment variables were set by the Openstack RC file

  if [ -z "$OS_USERNAME" ]; then
    echo "$EXE: error: rc file did not set OS_USERNAME: $_RC_FILE" >&2
    exit 1
  fi
  if [ -z "$OS_PROJECT_ID" ]; then
    echo "$EXE: error: rc file did not set OS_PROJECT_ID: $_RC_FILE" >&2
    exit 1
  fi
  if [ -z "$OS_PROJECT_NAME" ]; then
    echo "$EXE: error: rc file did not set OS_PROJECT_NAME: $_RC_FILE" >&2
    exit 1
  fi
  if [ -z "$OS_AUTH_URL" ]; then
    echo "$EXE: error: rc file did not set OS_AUTH_URL: $_RC_FILE" >&2
    exit 1
  fi

  # Configure the project from the sourced RC file

  configure_project_sourced
}

#----------------------------------------------------------------

configure_projects_from_dir() {
  local _DIR="$1"

  if [ ! -d "$_DIR" ]; then
    echo "$EXE: error: not a directory: $_DIR" >&2
    exit 1
  fi

  local _RC_FILE
  local _FOUND

  for _RC_FILE in "$_DIR"/*-openrc.sh; do
    _FOUND=yes

    configure_project_from_rc_file "$_RC_FILE"
  done

  if [ -z "$_FOUND" ]; then
    echo "$EXE: error: no *-openrc.sh files in directory: $_DIR" >&2
    exit 1
  fi
}

#----------------------------------------------------------------
# Get password
#
# Ensures OS_PASSWORD is set. Prompts for a password, if it was not
# set (usually because an OpenStack RC file has been sourced).

get_password() {
  if [ ! -z "${OS_PASSWORD+x}" ]; then
    PASSWORD="$OS_PASSWORD"
  else
    # Prompt for password
    echo "Please enter your OpenStack Password: "
    read -sr PASSWORD
    if [ -z "$PASSWORD" ]; then
      echo "$EXE: aborted" >&2
      exit 1
    fi
  fi
  export OS_PASSWORD_INPUT="$PASSWORD"
}

#----------------------------------------------------------------
# Functions for using the log file
#
# Except for the header in the first few lines, entries in the log
# file contains three fields separated by ": ":
#
# YYYY-MM-DDTHH:MM:SS+HHMM: FROM: nnn.nnn.nnn.nnn
#
# Where "FROM" is either "STUN" or "manual", depending on if the IP
# address was obtained using the STUN protocol or specified as a
# command line argument.

ip_has_changed() {
  if [ -n "$LOG_FILE" ] && [ -e "$LOG_FILE" ]; then
    # Try to check against the last entry in the log file

    local _OLD_IP
    _OLD_IP=$(tail -n 1 "$LOG_FILE" | awk -F': ' '{print $3}')

    if [ "$IP_ADDRESS" = "$_OLD_IP" ]; then
      return 1 # unchanged
    fi
  fi

  # No log file, or last entry contains different IP address

  return 0 # treat as changed
}

#----------------

ip_save_log() {
  if [ -z "$LOG_FILE" ]; then
    # Skip: no file to write to
    return
  fi

  local _LOG_DIR
  _LOG_DIR="$(dirname "$LOG_FILE")"
  if [ ! -d "$_LOG_DIR" ]; then
    # Make sure directory exists
    mkdir -p "$_LOG_DIR"
  fi

  # Populate the file

  if [ ! -e "$LOG_FILE" ] || [ -z "$FULL_LOG" ]; then
    # Start a new file, or remove all old entries if not keeping a full log
    echo "# $PROGRAM" > "$LOG_FILE"
    echo "# $EXE_DIR/$EXE_EXT" >> "$LOG_FILE"
  fi

  local _SRC
  if [ -n "$FROM_STUN" ]; then
    _SRC=STUN
  else
    _SRC=manual
  fi

  echo "$(date '+%FT%T%z'): $_SRC: $IP_ADDRESS" >> "$LOG_FILE" # append
}

#----------------------------------------------------------------
# Main

main() {
  process_command_line "$@"

  # Check for openstack command line client

  if ! which openstack >/dev/null; then
    echo "$EXE: error: \"openstack\" command not found" >&2
    exit 1
  fi

  # Check if update needs to be performed

  if [ -z "$FORCE" ] && ! ip_has_changed; then
    echo "$EXE: IP address unchanged ($IP_ADDRESS): no update (-f to force)" >&2
    exit 0
  fi

  # Process projects

  if [ -n "$RC_FILE_SRC" ]; then

    if [ -f "$RC_FILE_SRC" ]; then
      # Single project RC file
      get_password
      configure_project_from_rc_file "$RC_FILE_SRC"
    elif [ -d "$RC_FILE_SRC" ]; then
      # Project RC files from a directory
      get_password
      configure_projects_from_dir "$RC_FILE_SRC"
    else
      echo "$EXE: error: not a file or directory: $RC_FILE_SRC" >&2
      exit 1
    fi

  elif [ ! -z "${OS_PROJECT_NAME+x}" ]; then
    # Project OpenStack RC file already sourced

    get_password
    configure_project_sourced

  else
    # No project to configure
    echo "$EXE: error: no project (use --rc or source an OpenStack RC file)" >&2
    exit 1
  fi

  # Update log, if successfully updated at least one security group

  if [ $NUM_GROUPS_UPDATED -gt 0 ]; then
    ip_save_log
  else
    echo "$EXE: error: no security groups could be updated" >&2
    exit 1
  fi
}

main "$@"

#EOF
